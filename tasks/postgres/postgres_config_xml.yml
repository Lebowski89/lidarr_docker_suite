---

- name: Lidarr config.xml | Check config.xml
  block:
    - name: Lidarr config.xml | Lookup PostgresUser value
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        xpath: /Config/PostgresUser
        print_match: true
      register: xml_lidarr_postgresuser

    - name: Lidarr config.xml | Lookup PostgresPassword value
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        xpath: /Config/PostgresPassword
        print_match: true
      register: xml_lidarr_postgrespassword

    - name: Lidarr config.xml | Lookup PostgresPort value
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        xpath: /Config/PostgresPort
        print_match: true
      register: xml_lidarr_postgresport

    - name: Lidarr config.xml | Lookup PostgresHost value
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        xpath: /Config/PostgresHost
        print_match: true
      register: xml_lidarr_postgreshost

    - name: Lidarr config.xml | Lookup PostgresMainDb value
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        xpath: /Config/PostgresMainDb
        print_match: true
      register: xml_lidarr_postgresmaindb

    - name: Lidarr config.xml | Lookup PostgresLogDb value
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        xpath: /Config/PostgresLogDb
        print_match: true
      register: xml_lidarr_postgreslogdb

- name: Modify config.xml with postgres values
  block:
    - name: Lidarr.xml | Adding PostgresUser
      when: ((xml_lidarr_postgresuser.matches[0].PostgresUser is not defined) or
             (xml_lidarr_postgresuser.matches[0].PostgresUser != lidarr_postgres_auth_user ))
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        pretty_print: true
        xpath: /Config/PostgresUser
        value: '{{ lidarr_postgres_auth_user }}'

    - name: Lidarr.xml | Adding PostgresPassword
      when: ((xml_lidarr_postgrespassword.matches[0].PostgresPassword is not defined) or
             (xml_lidarr_postgrespassword.matches[0].PostgresPassword != lidarr_postgres_auth_password ))
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        pretty_print: true
        xpath: /Config/PostgresPassword
        value: '{{ lidarr_postgres_auth_password }}'

    - name: Lidarr.xml | Adding PostgresPort
      when: ((xml_lidarr_postgresport.matches[0].PostgresPort is not defined) or
             (xml_lidarr_postgresport.matches[0].PostgresPort != lidarr_postgres_ports_cont ))
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        pretty_print: true
        xpath: /Config/PostgresPort
        value: '{{ lidarr_postgres_ports_cont }}'

    - name: Lidarr.xml | Adding PostgresHost
      when: ((xml_lidarr_postgreshost.matches[0].PostgresHost is not defined) or
             (xml_lidarr_postgreshost.matches[0].PostgresHost != lidarr_postgres_basics_name ))
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        pretty_print: true
        xpath: /Config/PostgresHost
        value: '{{ lidarr_postgres_basics_name }}'

    - name: Lidarr.xml | Adding PostgresMainDb
      when: ((xml_lidarr_postgresmaindb.matches[0].PostgresMainDb is not defined) or
             (xml_lidarr_postgresmaindb.matches[0].PostgresMainDb != lidarr_postgres_database_main ))
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        pretty_print: true
        xpath: /Config/PostgresMainDb
        value: '{{ lidarr_postgres_database_main }}'

    - name: Lidarr.xml | Adding PostgresLogDb
      when: ((xml_lidarr_postgreslogdb.matches[0].PostgresLogDb is not defined) or
             (xml_lidarr_postgreslogdb.matches[0].PostgresLogDb != lidarr_postgres_database_log ))
      community.general.xml:
        path: '{{ lidarr_paths_location }}/config.xml'
        pretty_print: true
        xpath: /Config/PostgresLogDb
        value: '{{ lidarr_postgres_database_log }}'

- name: Clean lidarr appdir
  block:
    - name: Remove sqlite database files
      when: lidarr_postgres_clean_files
      ansible.builtin.file:
        path: '{{ lidarr_paths_location }}/{{ item }}'
        state: absent
      loop:
        - logs.db
        - logs.db-shm
        - logs.db-wal
        - lidarr.db
        - lidarr.db-shm
        - lidarr.db-wal

    - name: Remove sqlite backups folder
      when: lidarr_postgres_clean_folders
      ansible.builtin.file:
        path: '{{ lidarr_paths_location }}/Backups'
        state: absent
