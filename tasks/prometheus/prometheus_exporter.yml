---

- name: Apply lidarr-exporter prometheus scrape config
  ansible.builtin.blockinfile:
    path: '{{ lidarr_prometheus_paths_location }}/prometheus.yml'
    marker: "# {mark} ANSIBLE MANAGED BLOCK - LIDARR-EXPORTER #"
    block: |
      {% filter indent(width=2, first=true) %}
      - job_name: '{{ lidarr_prometheus_exporter_name }}'
        scrape_interval: 1m
        static_configs:
          - targets: ['{{ lidarr_prometheus_exporter_name }}:{{ lidarr_prometheus_exporter_cont_port }}']
      {% endfilter %}
  notify:
    - restart prometheus

- name: Create lidarr prometheus exporter container
  community.docker.docker_container:
    name: '{{ lidarr_prometheus_exporter_name }}'
    image: '{{ lidarr_prometheus_exporter_image_repo }}:{{ lidarr_prometheus_exporter_image_tag }}'
    command: ["lidarr"]
    networks: '{{ lidarr_prometheus_exporter_networks }}'
    env:
      PUID: '{{ lidarr_prometheus_exporter_env_puid }}'
      PGID: '{{ lidarr_prometheus_exporter_env_pgid }}'
      TZ: '{{ lidarr_prometheus_exporter_env_timezone }}'
      PORT: '{{ lidarr_prometheus_exporter_cont_port }}'
      URL: 'http://{{ lidarr_basics_name }}:{{ lidarr_ports_cont }}'
      API_KEY: '{{ lidarr_api_key }}'
      ENABLE_ADDITIONAL_METRICS: 'true'
    ports:
      - '{{ lidarr_prometheus_exporter_host_port }}:{{ lidarr_prometheus_exporter_cont_port }}'
    restart_policy: '{{ lidarr_prometheus_exporter_restart_policy }}'