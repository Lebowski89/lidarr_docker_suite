---

- name: Create prometheus appdata directory
  ansible.builtin.file:
    path: '{{ lidarr_prometheus_paths_location }}'
    state: directory
    owner: '{{ lidarr_prometheus_env_puid }}'
    group: '{{ lidarr_prometheus_env_pgid }}'
    mode: '0755'

- name: Create prometheus metrics data directory
  ansible.builtin.file:
    path: '{{ lidarr_prometheus_paths_data_location }}'
    state: directory
    owner: '{{ lidarr_prometheus_env_puid }}'
    group: '{{ lidarr_prometheus_env_pgid }}'
    mode: '0755'

- name: Check if prometheus scrape config exists
  ansible.builtin.stat:
    path: '{{ lidarr_prometheus_paths_location }}/prometheus.yml'
  register: lidarr_prometheus_scrape_config

- name: Import prometheus scrape file
  when: not lidarr_prometheus_scrape_config.stat.exists
  ansible.builtin.template:
    src: '{{ role_path }}/templates/prometheus.yml.j2'
    dest: '{{ lidarr_prometheus_paths_location }}/prometheus.yml'
    force: true
    owner: '{{ lidarr_prometheus_env_puid }}'
    group: '{{ lidarr_prometheus_env_pgid }}'
    mode: '0664'
  notify:
    - restart prometheus

- name: Register prometheus network
  community.docker.docker_network_info:
    name: '{{ lidarr_prometheus_network }}'
  register: lidarr_prometheus_network_result

- name: Prometheus network builtin fail
  ansible.builtin.fail:
    msg: Prometheus network does not exist nor is it enabled. Ensure the Prometheus network variables contain valid entries.
  when:
    - not lidarr_prometheus_network_is_enabled
    - not lidarr_prometheus_network_result.exists

- name: Create prometheus network
  when: not lidarr_prometheus_network_result.exists
  community.docker.docker_network:
    name: '{{ lidarr_prometheus_network }}'
    driver: '{{ lidarr_prometheus_network_driver }}'
    ipam_config:
      - subnet: '{{ lidarr_prometheus_network_subnet }}'

- name: Register prometheus container
  community.docker.docker_container_info:
    name: '{{ lidarr_prometheus_basics_name }}'
  register: lidarr_prometheus_container_result

- name: Create prometheus container
  when: not lidarr_prometheus_container_result.exists
  community.docker.docker_container:
    name: '{{ lidarr_prometheus_basics_name }}'
    image: '{{ lidarr_prometheus_basics_image_repo }}:{{ lidarr_prometheus_basics_image_tag }}'
    networks: '{{ lidarr_prometheus_docker_networks }}'
    command: '{{ lidarr_prometheus_commands | reject("equalto", omit) | list }}'
    env:
      PUID: '{{ lidarr_prometheus_env_puid }}'
      PGID: '{{ lidarr_prometheus_env_pgid }}'
      TZ: '{{ lidarr_prometheus_env_timezone }}'
    labels: '{{ lidarr_prometheus_traefik_labels }}'
    ports:
      - '{{ lidarr_prometheus_ports_host }}:{{ lidarr_prometheus_ports_cont }}'
    volumes: '{{ lidarr_prometheus_volumes_binds }}'
    restart_policy: '{{ lidarr_prometheus_basics_restart_policy }}'